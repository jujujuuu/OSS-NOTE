git diff
-스테이징영역 기준에서 작업디렉토리 비교
-작업디렉토리에 있지만 스테이징영역엔 없는 정보는 +와 함께 출력

git diff HEAD
-깃저장소 HEAD기준으로 작업디렉토리 비교

git diff HEAD~
-HEAD~(이전커밋)을 기준으로 작업디렉토리 비교

git diff -staged
-스테이징영역을 기준으로 HEAD를 비교

git diff HEAD~ HEAD
-HEAD~를 기준으로 HEAD를 비교
git diff HEAD~2 HEAD~
-HEAD~2를 기준으로 HEAD~을 비교
git diff HEAD~2 HEAD
-HEAD~2를 기준으로 HEAD를 비교

# Git 파일 삭제 및 복원 명령어




#파일 삭제 명령어

git rm <파일이름>
-스테이징 영역과 작업 디렉토리에서 파일 삭제

git rm --cached <파일이름>
-스테이징 영역에서만 파일 삭제

rm -<파일이름>
- 작업 디렉토리에서만 삭제 (리눅스 명령어)



# 파일 복원 명령어

git restore <파일이름>
- 작업 디렉토리의 파일을 스테이징 영역의 상태로 복구
- 작업 디렉토리에서만 삭제된 경우 복구
- 작업 디렉토리에 기존 파일이 있었다면 기존 파일을 삭제한다

git restore --staged <파일이름>
- 깃 저장소의 최신 커밋 상태의 파일을 스테이징 영역에 복구

git restore --source=HEAD(--worktree) <파일이름>
- 파일을 커밋 상태의 내용으로 작업 디렉토리에 복사 (스테이징 영역 X)
- --worktree는 생략 가능

git restore --source=HEAD --staged --workingtree <파일이름>
- 스테이징 영역과 작업 디렉토리 영역의 파일이 HEAD 모양으로 복구

# Git 명령어 요약

# 파일 생성 명령어
echo "파일에 들어갈 문장" > 파일이름.txt - 파일 생성 코드

git add 파일이름.txt - 파일 ADD하기 (작업 디렉토리 -> 스테이징 영역)

git commit -am "커밋 메시지" - 파일 COMMIT하기 (스테이징 영역 -> 깃 저장소)

# 파일 상태확인 명령어
cat hello.txt # hello.txt 파일에 입력된 텍스트 출력

git status --long -파일 현재 위치와 상태를 자세히 표시
git status --short -파일 현재 위치와 상태를 간략히 표시


# 커밋 이력확인 명령어
git log -가장 최근 커밋부터 커밋 이력을 출력
git log --oneline -커밋 이력을 한 줄로 표시
git log --patch -커밋 이력과 변경 내용을 출력
git log --graph -그래프로 커밋 이력을 출력
git log --reverse -오래된 커밋부터 표시 ( --graph와 함께 사용할 수 없다)
git log --all -모든 브랜치의 커밋 이력을 출력
git log -n -최근 n개의 커밋 이력을 출력


# 커밋 출력 명령어
git show -가장 최신 커밋을 출력
git show --oneline -커밋을 한 줄로 표시
git show HEAD -헤드의 커밋을 출력
git show HEAD~ -이전 커밋을 출력
git show HEAD~~ -전전 커밋을 출력


#과거여행
git checkout HEAD~ - HEAD -이전 커밋으로 이동
git checkout - -이전 checkout으로 이동
git checkout main -브랜치의 마지막 커밋으로 이동
